// Project mixins
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

// Media
//////////////////////////////////////////////////////
// Breackpoins in styles/utils/_variables.scss

@mixin lg {
  @media only screen and (min-width: $breakpoints__lg) {
    @content;
  }
}

@mixin not-lg {
  @media only screen and (max-width: $breakpoints__md_max) {
    @content;
  }
}

@mixin not-gadgets {
  @media only screen and (min-width: $breakpoints__md) {
    @content;
  }
}

@mixin md {
  @media only screen and (min-width: $breakpoints__md) and (max-width: $breakpoints__md_max) {
    @content;
  }
}

@mixin sm {
  @media only screen and (min-width: $breakpoints__sm) and (max-width: $breakpoints__sm_max) {
    @content;
  }
}

@mixin gadgets {
  @media only screen and (max-width: $breakpoints__sm_max) {
    @content;
  }
}

@mixin not-xs {
  @media only screen and (min-width: $breakpoints__sm) {
    @content;
  }
}

@mixin xs {
  @media only screen and (max-width: $breakpoints__xs_max) {
    @content;
  }
}

@mixin min {
  @media only screen and (max-width: $breakpoints__xs) {
    @content;
  }
}

@mixin min--landscape {
  @include xs {
    @include landscape {
      @media (max-height: ($breakpoints__min + 10px)) {
        @content;
      }
    }
  }
}

@mixin landscape {
  @media only screen and (orientation: landscape) {
    @content;
  }
}

@mixin portrait {
  @media only screen and (orientation: portrait) {
    @content;
  }
}

// For problem with open keyboard on vertical mobiles
@mixin small-open {
  @media (max-width: 420px) and (max-height: 400px) {
    @content;
  }
}

@mixin iPadPro--landscape {
  @media only screen and (orientation: landscape)
    and (min-height: 1000px)
    and (min-width: ($breakpoints__md + 1px))
    and (max-width: 1400px) {
    @content;
  }
}

@mixin iPadPro--portrait {
  @media only screen and (orientation: portrait)
    and (min-height: 1300px)
    and (min-width: ($breakpoints__md - 1px))
    and (max-width: ($breakpoints__md + 50px)) {
    @content;
  }
}

@mixin iPhoneX--landscape {
  @media only screen and (orientation: landscape)
    and (min-width: $breakpoints__sm)
    and (max-width: ($breakpoints__md - 20px))
    and (max-height: 400px) {
    @content;
  }
}

@mixin iPhoneX--portrait {
  @media only screen and (orientation: portrait)
    and (min-height: $breakpoints__sm)
    and (max-height: $breakpoints__md - 10px)
    and (max-width: 450px) {
    @content;
  }
}

// Retina 2x
@mixin retina {
  @media only screen and (-Webkit-min-device-pixel-ratio: 1.5),
    only screen and (-moz-min-device-pixel-ratio: 1.5),
    only screen and (-o-min-device-pixel-ratio: 3/2),
    only screen and (min-device-pixel-ratio: 1.5) {
    @content;
  }
}

// stylelint-disable number-leading-zero
@mixin safari-only {
  @media not all and (min-resolution: .001dpcm) {
    @supports (-webkit-appearance: none) and (stroke-color: transparent) {
      @content;
    }
  }
}
// stylelint-enable number-leading-zero

// Elements
//////////////////////////////////////////////////////

// Size )
@mixin size($width, $height) {
  width: $width;
  height: $height;
}

// Long word in media !
@mixin very-long-letters-protection() {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word; // stylelint-disable declaration-block-no-duplicate-properties
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
}


// Buttons

@mixin button--gradient() {
  border: none;
  box-shadow: 0 8px 30px rgba(255, 158, 106, 0.4);
  will-change: background;
  color: $colors--white;
  @include transitions(all);

  &:hover,
  &:active,
  &:focus {
    color: $colors--white;
    transform: translateY(-1 * $translate-size);
    box-shadow: 0 8px 30px rgba(255, 158, 106, 0.5);

    @include not-gadgets {
      transform: translateY(-1 * $translate-size_number * $rubber-width_pixel);
    }
  }
}

@mixin button--transparent($colors) {
  background-color: transparent;
  color: $colors;
  border: $border-width solid $colors;
  will-change: border-color;
  @include transitions(all);

  &:hover,
  &:active,
  &:focus {
    color: $colors;
    transform: translateY(-1 * $translate-size);
    background: $colors--white_lighten;

    @include not-gadgets {
      transform: translateY(-1 * $translate-size_number * $rubber-width_pixel);
    }
  }
}


// Links
@mixin link__color($colors, $colors-hover) {
  will-change: color;
  @include transitions(color);

  &,
  &:focus {
    color: $colors;
  }

  &:hover,
  &:active {
    color: $colors-hover;
  }
}


// Effects
//////////////////////////////////////////////////////

// Multi-transition
// Pass in any number of transitions
@mixin transitions($transitions...) {
  $unfoldedTransitions: ();

  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  transition: $unfoldedTransitions;
}

@function unfoldTransition($transition) {
  // Default values
  $property: all;
  $duration: $transition-duration;
  $easing: $transition-timing-function;
  $delay: $transition-delay;
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();

  @for $i from 1 through length($defaultProperties) {
    $p: null;

    @if $i <= length($transition) {
      $p: nth($transition, $i);
    } @else {
      $p: nth($defaultProperties, $i);
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}
